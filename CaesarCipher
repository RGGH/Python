import string

class Caesar():
    
    def __init__(self, key,tx, mode):
        self.key = key
        self.tx = tx
        self.mode = mode
        self.symbols = string.ascii_lowercase + "0123456789 "
        self.lsm = len(self.symbols)
        
    def endecrypt(self):
        res = ""
        if self.mode == 0:
            for i in self.tx:
                if i in self.symbols:
                    # encrpypt and check for wrapround
                    if (self.symbols.find(i) + self.key) >= self.lsm:
                        new_index = self.symbols.find(i) - self.key
                    else:
                        new_index = self.symbols.find(i) + self.key
                    res +=(self.symbols[new_index])
            return(f"The encrypted version of {self.tx} is {res}")
        else:
            for i in self.tx:
                if i in self.symbols:
                    # decrypt and check for wrapround
                    if (self.symbols.find(i) - self.key) <= self.lsm:
                        new_index = self.symbols.find(i) - self.key
                    else:
                        new_index = self.symbols.find(i) + self.key
                    res +=(self.symbols[new_index])
            return(f"The decrypted version of {self.tx} is {res}")

c = Caesar(13,"uryy1",1)

print(c.endecrypt())

